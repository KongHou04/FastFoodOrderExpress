@page "/Category"
@using admin.Models
@using System.Net.Http.Json
@using Newtonsoft.Json
@inject IJSRuntime JS
@inject HttpClient Http

<h3>AdminCategory</h3>
<NavLink class="btn btn-primary" href="create">Create</NavLink>
@if (categories != null && categories.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in categories)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>
                        @{
                            string linkedit = "edit/" + item.Id;
                            <NavLink href="@linkedit" class="btn btn-warning">Edit</NavLink>
                        }
                       |  <button class="btn btn-danger" @onclick="()=>Delete(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading Product...</p>
}
@code {
    private List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var response = await Http.GetAsync("categories/getall");
        var apiResponse = await DeserializeResponse<Response>(response);

        if (apiResponse.IsSuccess)
        {
            categories = JsonConvert.DeserializeObject<List<Category>>(apiResponse.Data.ToString());
        }
        else
        {
            // Handle errors
        }
    }

    private async Task Delete(Guid id)
    {
        var response = await Http.DeleteAsync($"categories?id={id}");
        var apiResponse = await DeserializeResponse<Response>(response);

        if (apiResponse.IsSuccess)
        {
            await JS.InvokeVoidAsync("ShowAlert", "Delete success");
            await LoadData();
        }
        else
        {
            await JS.InvokeVoidAsync("ShowAlert", "Delete failed");
        }
    }

    private async Task<T> DeserializeResponse<T>(HttpResponseMessage response)
    {
        var responseString = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<T>(responseString);
    }
}
